import { useState, useEffect, useRef } from 'react'
import { Card } from './ui/card'
import { Input } from './ui/input'
import { Button } from './ui/button'
import { Send, Loader2 } from 'lucide-react'
import { cn } from '../lib/utils'
import { useCart } from '../hooks/useCart'
import { useCache } from '../hooks/useCache'
import { CartDisplay } from './CartDisplay'
import { ProductGallery } from './ProductGallery'
import { OrderForm } from './OrderForm'
import { TypingMessage } from './TypingMessage'
import type { Product, OrderForm as OrderFormType } from '../types'
import { mockProducts, searchProducts, getPopularProducts } from '../data/mockProducts'
import { searchProductsSemantic, getPopularProductsSemantic } from '../utils/semanticSearch'
import { createSimpleLogger, getSimpleLogger } from '../utils/simpleLogger'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
  products?: Product[]
  showCart?: boolean
  showOrderForm?: boolean
  typing?: boolean
  cached?: boolean
}

export function ChatInterface() {
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [showOrderForm, setShowOrderForm] = useState(false)
  const [orderLoading, setOrderLoading] = useState(false)
  const [apiStatus, setApiStatus] = useState<'unknown' | 'online' | 'offline'>('unknown')
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const sessionId = useRef(`session-${Date.now()}`).current
  const { cart, getItemCount } = useCart()
  const { getCachedData, setCachedData, hasCachedData } = useCache()
  const logger = useRef<ReturnType<typeof createSimpleLogger> | null>(null)
  
  if (!logger.current) {
    logger.current = createSimpleLogger(sessionId)
  }

  // Preload popular products for instant responses
  useEffect(() => {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    const loadPopularProducts = async () => {
      try {
        const popularProducts = await getPopularProductsSemantic()
        setCachedData('popular_products', popularProducts, 3600) // 1 hour cache
        
        logger.current?.log('semantic_search', {
          type: 'popular_products_loaded',
          count: popularProducts.length,
          method: 'semantic'
        })
      } catch (error) {
        // Fallback –∫ –æ–±—ã—á–Ω—ã–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º
        const popularProducts = getPopularProducts()
        setCachedData('popular_products', popularProducts, 3600)
        
        logger.current?.log('fallback', {
          type: 'popular_products_fallback',
          count: popularProducts.length,
          error: error.message,
          method: 'text_search'
        })
      }
    }
    
    loadPopularProducts()
    
    // Cache common responses
    const commonResponses = [
      { query: '—Ä–æ–∑—ã', response: 'üåπ –í–æ—Ç –Ω–∞—à–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã:', products: searchProducts('—Ä–æ–∑—ã') },
      { query: '–±—É–∫–µ—Ç—ã', response: 'üå∏ –ü–æ–∫–∞–∑—ã–≤–∞—é –±—É–∫–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:', products: mockProducts.slice(0, 6) },
      { query: '–∫–æ—Ä–∑–∏–Ω–∞', response: 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:', showCart: true }
    ]
    
    commonResponses.forEach(item => {
      setCachedData(`response_${item.query}`, item, 1800) // 30 min cache
    })
  }, [])

  useEffect(() => {
    // Scroll to bottom when new messages arrive
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  const handleQuickAction = async (action: string) => {
    if (action === 'show_products') {
      let products
      try {
        products = await getPopularProductsSemantic()
        logger.current?.log('semantic_search', {
          type: 'quick_action_products',
          method: 'semantic',
          resultsCount: products.length
        })
      } catch (error) {
        products = getPopularProducts()
        logger.current?.log('fallback', {
          type: 'quick_action_fallback',
          error: error.message,
          method: 'text_search'
        })
      }
      
      const assistantMessage: Message = {
        id: `msg-${Date.now()}-products`,
        role: 'assistant',
        content: 'üåπ –í–æ—Ç –Ω–∞—à–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—É–∫–µ—Ç—ã:',
        timestamp: new Date(),
        products
      }
      setMessages(prev => [...prev, assistantMessage])
    } else if (action === 'show_cart') {
      const assistantMessage: Message = {
        id: `msg-${Date.now()}-cart`,
        role: 'assistant',
        content: 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:',
        timestamp: new Date(),
        showCart: true
      }
      setMessages(prev => [...prev, assistantMessage])
    } else if (action === 'checkout') {
      setShowOrderForm(true)
    }
  }

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: `msg-${Date.now()}`,
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const messageContent = input.trim().toLowerCase()
    setInput('')

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.current?.log('user_message', {
      content: userMessage.content,
      messageId: userMessage.id,
      timestamp: userMessage.timestamp
    })

    // Check cache first for instant responses
    const cacheKey = `response_${messageContent}`
    const cachedResponse = getCachedData(cacheKey)
    
    if (cachedResponse) {
      // Instant cached response
      logger.current?.log('cache_hit', {
        query: messageContent,
        cachedResponse: cachedResponse.response,
        cacheKey
      })

      const assistantMessage: Message = {
        id: `msg-${Date.now()}-ai`,
        role: 'assistant',
        content: cachedResponse.response,
        timestamp: new Date(),
        products: cachedResponse.products,
        showCart: cachedResponse.showCart,
        cached: true
      }
      
      setMessages(prev => [...prev, assistantMessage])
      
      logger.current?.log('ai_response', {
        content: assistantMessage.content,
        messageId: assistantMessage.id,
        fromCache: true,
        hasProducts: !!assistantMessage.products,
        showCart: !!assistantMessage.showCart
      })
      
      if (assistantMessage.showCart || assistantMessage.showOrderForm) {
        if (assistantMessage.showOrderForm) setShowOrderForm(true)
      }
      return
    }

    // Show typing indicator
    const typingMessage: Message = {
      id: `msg-${Date.now()}-typing`,
      role: 'assistant',
      content: '–ü–æ–¥–±–∏—Ä–∞—é –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...',
      timestamp: new Date(),
      typing: true
    }
    
    setMessages(prev => [...prev, typingMessage])
    setIsLoading(true)

    try {
      let assistantMessage: Message
      let shouldCallAPI = true
      
      // First try API for intelligent responses
      const apiCacheKey = `api_${messageContent}`
      let apiResponse = getCachedData(apiCacheKey)
      
      if (!apiResponse) {
        try {
          const startTime = Date.now()
          const controller = new AbortController()
          const timeoutId = setTimeout(() => controller.abort(), 10000) // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 10 —Å–µ–∫—É–Ω–¥
          
          const requestBody = {
            message: messageContent,
            sessionId: sessionId,
            conversationHistory: messages.slice(-6).map(m => ({
              role: m.role,
              content: m.content
            }))
          }

          logger.current?.log('api_request', {
            url: 'https://faq-demo.cvety.kz/api/chat-stream',
            method: 'POST',
            body: requestBody,
            query: messageContent
          })
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π endpoint
          const response = await fetch('https://faq-demo.cvety.kz/api/chat', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              ...requestBody,
              timestamp: Date.now()
            }),
            signal: controller.signal
          })
          
          clearTimeout(timeoutId)
          const data = await response.json()
          const duration = Date.now() - startTime

          logger.current?.log('api_response', {
            status: response.status,
            success: data.success,
            response: data.response,
            data: data,
            query: messageContent
          }, duration)
          
          if (data.success && data.response) {
            apiResponse = data.response
            setCachedData(apiCacheKey, apiResponse, 600)
            shouldCallAPI = false
            setApiStatus('online')
          }
        } catch (fetchError) {
          logger.current?.log('error', {
            type: 'api_fetch_error',
            error: fetchError.message,
            query: messageContent,
            fallback: 'using pattern matching'
          })
          setApiStatus('offline')
          console.log('AI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É')
        }
      } else {
        shouldCallAPI = false
      }
      
      // If API worked, use that response
      if (apiResponse && !shouldCallAPI) {
        assistantMessage = {
          id: `msg-${Date.now()}-ai`,
          role: 'assistant',
          content: apiResponse,
          timestamp: new Date(),
          cached: !!getCachedData(apiCacheKey)
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –Ω–∏—Ö –ò–õ–ò AI —è–≤–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å
        const shouldShowProducts = (
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–æ–≤–∞—Ä–∞—Ö
          messageContent.includes('—Ä–æ–∑—ã') || 
          messageContent.includes('–±—É–∫–µ—Ç') || 
          messageContent.includes('—Ü–≤–µ—Ç—ã') ||
          messageContent.includes('–Ω–∞–ª–∏—á–∏–∏') ||
          messageContent.includes('–ø–æ–∫–∞–∂–∏') ||
          messageContent.includes('–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç') ||
          // AI —è–≤–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
          apiResponse.toLowerCase().includes('–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ') ||
          apiResponse.toLowerCase().includes('–≤–æ—Ç –Ω–∞—à–∏') ||
          apiResponse.toLowerCase().includes('–ø–æ–∫–∞–∑—ã–≤–∞—é') ||
          apiResponse.toLowerCase().includes('–∫–∞—Ç–∞–ª–æ–≥')
        )
        
        if (shouldShowProducts) {
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (apiResponse.toLowerCase().includes('—Ä–æ–∑—ã') || messageContent.includes('—Ä–æ–∑—ã')) {
              assistantMessage.products = await searchProductsSemantic('–∫—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–∑—ã –±—É–∫–µ—Ç—ã', 6)
              logger.current?.log('semantic_search', {
                query: '—Ä–æ–∑—ã',
                resultsCount: assistantMessage.products.length,
                method: 'semantic'
              })
            } else if (messageContent.includes('–Ω–∞–ª–∏—á–∏–∏') || messageContent.includes('–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç')) {
              assistantMessage.products = await searchProductsSemantic('–±—É–∫–µ—Ç—ã —Ü–≤–µ—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏', 8)
              logger.current?.log('semantic_search', {
                query: '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç',
                resultsCount: assistantMessage.products.length,
                method: 'semantic'
              })
            } else if (apiResponse.toLowerCase().includes('–±—É–∫–µ—Ç') || messageContent.includes('–±—É–∫–µ—Ç') || messageContent.includes('—Ü–≤–µ—Ç—ã')) {
              assistantMessage.products = await searchProductsSemantic('–∫—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–µ—Ç—ã —Ü–≤–µ—Ç—ã', 6)
              logger.current?.log('semantic_search', {
                query: '–±—É–∫–µ—Ç—ã',
                resultsCount: assistantMessage.products.length,
                method: 'semantic'
              })
            }
          } catch (error) {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ–∏—Å–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            logger.current?.log('fallback', {
              type: 'semantic_search_error',
              error: error.message,
              fallbackToTextSearch: true
            })
            
            if (apiResponse.toLowerCase().includes('—Ä–æ–∑—ã') || messageContent.includes('—Ä–æ–∑—ã')) {
              assistantMessage.products = searchProducts('—Ä–æ–∑—ã')
            } else if (messageContent.includes('–Ω–∞–ª–∏—á–∏–∏') || messageContent.includes('–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç')) {
              assistantMessage.products = mockProducts.slice(0, 8)
            } else if (apiResponse.toLowerCase().includes('–±—É–∫–µ—Ç') || messageContent.includes('–±—É–∫–µ—Ç') || messageContent.includes('—Ü–≤–µ—Ç—ã')) {
              assistantMessage.products = mockProducts.slice(0, 6)
            }
          }
        }

        logger.current?.log('ai_response', {
          content: assistantMessage.content,
          messageId: assistantMessage.id,
          fromAPI: true,
          fromCache: assistantMessage.cached,
          hasProducts: !!assistantMessage.products,
          query: messageContent
        })
        
      } else {
        // Fallback to pattern matching if API fails
        logger.current?.log('fallback', {
          reason: 'API unavailable or failed',
          query: messageContent,
          usingPatternMatching: true
        })

        if (messageContent.includes('–Ω–∞–ª–∏—á–∏–∏') || messageContent.includes('–µ—Å—Ç—å') || messageContent.includes('–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç')) {
          let products
          try {
            products = await searchProductsSemantic('–±—É–∫–µ—Ç—ã —Ü–≤–µ—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', 8)
            logger.current?.log('semantic_search', {
              type: 'fallback_inventory',
              query: '–Ω–∞–ª–∏—á–∏–∏/–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç',
              resultsCount: products.length,
              method: 'semantic'
            })
          } catch (error) {
            products = mockProducts.slice(0, 8)
            logger.current?.log('fallback', {
              type: 'semantic_search_fallback',
              error: error.message,
              usingMockData: true
            })
          }
          
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'üå∏ –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏:',
            timestamp: new Date(),
            products
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'inventory_pattern',
            productsCount: products.length,
            query: messageContent
          })
        } else if (messageContent.includes('—Ä–æ–∑—ã') || messageContent.includes('—Ä–æ–∑')) {
          let roses
          try {
            roses = await searchProductsSemantic('–∫—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–∑—ã –∫—Ä–∞—Å–Ω—ã–µ –±–µ–ª—ã–µ –±—É–∫–µ—Ç—ã', 6)
            logger.current?.log('semantic_search', {
              type: 'fallback_roses',
              query: '—Ä–æ–∑—ã',
              resultsCount: roses.length,
              method: 'semantic'
            })
          } catch (error) {
            roses = searchProducts('—Ä–æ–∑—ã')
            logger.current?.log('fallback', {
              type: 'semantic_search_fallback',
              error: error.message,
              usingTextSearch: true
            })
          }
          
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'üåπ –í–æ—Ç –Ω–∞—à–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã:',
            timestamp: new Date(),
            products: roses
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'roses_pattern',
            productsCount: roses.length,
            query: messageContent
          })
        } else if (messageContent.includes('–±—É–∫–µ—Ç') || messageContent.includes('—Ü–≤–µ—Ç—ã')) {
          let products
          try {
            products = await searchProductsSemantic('–∫—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–µ—Ç—ã —Ü–≤–µ—Ç—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏', 6)
            logger.current?.log('semantic_search', {
              type: 'fallback_bouquets',
              query: '–±—É–∫–µ—Ç—ã/—Ü–≤–µ—Ç—ã',
              resultsCount: products.length,
              method: 'semantic'
            })
          } catch (error) {
            products = mockProducts.slice(0, 6)
            logger.current?.log('fallback', {
              type: 'semantic_search_fallback',
              error: error.message,
              usingMockData: true
            })
          }
          
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'üå∏ –ü–æ–∫–∞–∑—ã–≤–∞—é –±—É–∫–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:',
            timestamp: new Date(),
            products
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'bouquet_pattern',
            productsCount: products.length,
            query: messageContent
          })
        } else if (messageContent.includes('–∫–æ—Ä–∑–∏–Ω')) {
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:',
            timestamp: new Date(),
            showCart: true
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'cart_pattern',
            showCart: true,
            query: messageContent
          })
        } else if (messageContent.includes('—Ü–µ–Ω–∞') || messageContent.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || messageContent.includes('—Å–∫–æ–ª—å–∫–æ')) {
          let products
          try {
            products = await searchProductsSemantic('–Ω–µ–¥–æ—Ä–æ–≥–∏–µ –±—É–∫–µ—Ç—ã —Ü–µ–Ω—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å', 6)
            logger.current?.log('semantic_search', {
              type: 'fallback_prices',
              query: '—Ü–µ–Ω—ã/—Å—Ç–æ–∏–º–æ—Å—Ç—å',
              resultsCount: products.length,
              method: 'semantic'
            })
          } catch (error) {
            products = mockProducts.slice(0, 6)
            logger.current?.log('fallback', {
              type: 'semantic_search_fallback',
              error: error.message,
              usingMockData: true
            })
          }
          
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'üí∞ –¶–µ–Ω—ã –Ω–∞ –Ω–∞—à–∏ –±—É–∫–µ—Ç—ã:',
            timestamp: new Date(),
            products
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'price_pattern',
            productsCount: products.length,
            query: messageContent
          })
        } else if (messageContent.includes('–¥–æ—Å—Ç–∞–≤–∫–∞') || messageContent.includes('–¥–æ—Å—Ç–∞–≤–∏—Ç—å')) {
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'üöö –î–æ—Å—Ç–∞–≤–∫–∞:\n\n‚Ä¢ –ü–æ –ê–ª–º–∞—Ç—ã: 2000‚Ç∏ (2-4 —á–∞—Å–∞)\n‚Ä¢ –ü–æ –ê—Å—Ç–∞–Ω–µ: 2500‚Ç∏ (3-5 —á–∞—Å–æ–≤)\n‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 15000‚Ç∏\n‚Ä¢ –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (1-2 —á–∞—Å–∞): +1000‚Ç∏',
            timestamp: new Date()
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'delivery_pattern',
            query: messageContent
          })
        } else if (messageContent.includes('–∑–∞–∫–∞–∑') || messageContent.includes('–æ—Ñ–æ—Ä–º–∏—Ç—å')) {
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'üìù –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –≤–∞—à –∑–∞–∫–∞–∑:',
            timestamp: new Date(),
            showOrderForm: true
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'order_pattern',
            showOrderForm: true,
            query: messageContent
          })
        } else if (messageContent.includes('–ø—Ä–∏–≤–µ—Ç') || messageContent.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ') || messageContent.includes('–¥–æ–±—Ä–æ')) {
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cvety.kz!\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –±—É–∫–µ—Ç. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å:\n‚Ä¢ üåπ –†–æ–∑—ã\n‚Ä¢ üå∏ –ë—É–∫–µ—Ç—ã\n‚Ä¢ üí∞ –¶–µ–Ω—ã\n‚Ä¢ üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
            timestamp: new Date()
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'greeting_pattern',
            query: messageContent
          })
        } else if (messageContent.includes('–ø–æ–º–æ—â—å') || messageContent.includes('–ø–æ–º–æ–≥–∏') || messageContent.includes('–∫–∞–∫')) {
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'ü§ñ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç—ã –∏ —Ä–æ–∑—ã\n‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ü–µ–Ω–∞—Ö\n‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n‚Ä¢ –ü–æ–º–æ—á—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ: "–ü–æ–∫–∞–∂–∏ —Ä–æ–∑—ã" –∏–ª–∏ "–ß—Ç–æ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏?"',
            timestamp: new Date()
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'help_pattern',
            query: messageContent
          })
        } else {
          assistantMessage = {
            id: `msg-${Date.now()}-ai`,
            role: 'assistant',
            content: 'ü§ñ AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:\n‚Ä¢ "–ß—Ç–æ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏?"\n‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Ä–æ–∑—ã"\n‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?"\n‚Ä¢ "–ü–æ–º–æ—â—å"',
            timestamp: new Date()
          }
          logger.current?.log('ai_response', {
            content: assistantMessage.content,
            messageId: assistantMessage.id,
            fallbackType: 'enhanced_default_message',
            query: messageContent
          })
        }
      }
      
      // Remove typing indicator and add real response
      setMessages(prev => prev.filter(m => m.id !== typingMessage.id).concat(assistantMessage))
      
      if (assistantMessage.showOrderForm) {
        setShowOrderForm(true)
      }
      
    } catch (error) {
      logger.current?.log('error', {
        type: 'message_processing_error',
        error: error instanceof Error ? error.message : 'Unknown error',
        query: messageContent,
        stack: error instanceof Error ? error.stack : undefined
      })

      console.error('Error sending message:', error)
      const errorMessage: Message = {
        id: `msg-${Date.now()}-error`,
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        timestamp: new Date()
      }
      setMessages(prev => prev.filter(m => m.id !== typingMessage.id).concat(errorMessage))
      
      logger.current?.log('ai_response', {
        content: errorMessage.content,
        messageId: errorMessage.id,
        isError: true,
        query: messageContent
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleOrderSubmit = async (orderData: OrderFormType) => {
    setOrderLoading(true)
    
    try {
      // Simulate order submission
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const orderNumber = `CVT-${Date.now().toString().slice(-6)}`
      
      let paymentInfo = ''
      if (orderData.paymentMethod === 'kaspi') {
        const kaspiLink = `https://kaspi.kz/pay?order=${orderNumber}&amount=${cart.total}&phone=${orderData.phone}`
        paymentInfo = `üí≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã Kaspi –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ ${orderData.phone}\nüîó –ò–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${kaspiLink}\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${cart.total.toLocaleString('ru-RU')}‚Ç∏`
      } else {
        paymentInfo = `üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏: ${cart.total.toLocaleString('ru-RU')}‚Ç∏`
      }

      const successMessage: Message = {
        id: `msg-${Date.now()}-success`,
        role: 'assistant',
        content: `‚úÖ –ó–∞–∫–∞–∑ #${orderNumber} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\nüì± SMS —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${orderData.phone}\nüöö –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É ${orderData.deliveryDate} –∫ ${orderData.deliveryTime}\n\n${paymentInfo}\n\nüìû –í–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É: +7 777 123 4567\nüîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑: cvety.kz/track/${orderNumber}`,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, successMessage])
      setShowOrderForm(false)
      
      // Clear cart after successful order
      // clearCart() - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
    } catch (error) {
      console.error('Order submission error:', error)
    } finally {
      setOrderLoading(false)
    }
  }

  return (
    <Card className="w-full max-w-4xl mx-auto h-[600px] flex flex-col">
      {/* Chat messages */}
      <div 
        ref={scrollAreaRef}
        className="flex-1 overflow-y-auto p-4 space-y-4"
      >
        {messages.length === 0 && (
          <div className="text-center text-muted-foreground py-8">
            <p className="text-lg mb-4">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cvety.kz!</p>
            <p className="mb-4">–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –±—É–∫–µ—Ç–∞—Ö, –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.</p>
            
            <div className="flex flex-wrap gap-2 justify-center">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => handleQuickAction('show_products')}
              >
                üåπ –ü–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç—ã
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => handleQuickAction('show_cart')}
              >
                üõí –ö–æ—Ä–∑–∏–Ω–∞ ({getItemCount()})
              </Button>
              {getItemCount() > 0 && (
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleQuickAction('checkout')}
                >
                  üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                </Button>
              )}
            </div>
          </div>
        )}
        
        {messages.map((message) => (
          <div key={message.id} className="space-y-3">
            <div
              className={cn(
                "flex",
                message.role === 'user' ? 'justify-end' : 'justify-start'
              )}
            >
              <div
                className={cn(
                  "max-w-[80%] rounded-lg px-4 py-2",
                  message.role === 'user'
                    ? 'bg-primary text-primary-foreground'
                    : 'bg-muted'
                )}
              >
                {message.typing ? (
                  <TypingMessage content={message.content} speed={25} />
                ) : (
                  <p className="whitespace-pre-wrap">{message.content}</p>
                )}
                
                <div className="flex items-center justify-between mt-1">
                  <p className="text-xs opacity-70">
                    {message.timestamp.toLocaleTimeString('ru-RU', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </p>
                  {message.cached && (
                    <span className="text-xs opacity-50 ml-2">‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç</span>
                  )}
                </div>
              </div>
            </div>
            
            {/* Products display */}
            {message.products && (
              <div className="ml-4">
                <ProductGallery 
                  products={message.products}
                  title={undefined}
                />
              </div>
            )}
            
            {/* Cart display */}
            {message.showCart && (
              <div className="ml-4">
                <CartDisplay 
                  onCheckout={() => setShowOrderForm(true)}
                  compact={false}
                />
              </div>
            )}
          </div>
        ))}

        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-muted rounded-lg px-4 py-2">
              <Loader2 className="h-4 w-4 animate-spin" />
            </div>
          </div>
        )}
      </div>

      {/* Order Form Modal */}
      {showOrderForm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <OrderForm
              onSubmit={handleOrderSubmit}
              onBack={() => setShowOrderForm(false)}
              loading={orderLoading}
            />
          </div>
        </div>
      )}

      {/* Cart indicator */}
      {getItemCount() > 0 && (
        <div className="px-4 py-2 border-t bg-muted/50">
          <CartDisplay compact onCheckout={() => setShowOrderForm(true)} />
        </div>
      )}

      {/* API Status */}
      {apiStatus !== 'unknown' && (
        <div className={`px-4 py-2 text-xs flex items-center gap-2 ${
          apiStatus === 'online' ? 'bg-green-50 text-green-700' : 'bg-yellow-50 text-yellow-700'
        }`}>
          <div className={`w-2 h-2 rounded-full ${
            apiStatus === 'online' ? 'bg-green-500' : 'bg-yellow-500'
          }`} />
          {apiStatus === 'online' 
            ? 'ü§ñ AI –ø–æ–¥–∫–ª—é—á–µ–Ω' 
            : '‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞'
          }
        </div>
      )}

      {/* Input form */}
      <form onSubmit={sendMessage} className="p-4 border-t">
        <div className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            disabled={isLoading}
            className="flex-1"
          />
          <Button type="submit" disabled={isLoading || !input.trim()}>
            <Send className="h-4 w-4" />
          </Button>
        </div>
        
        {/* Quick action buttons */}
        <div className="flex flex-wrap gap-2 mt-2">
          <Button 
            variant="ghost" 
            size="sm"
            type="button"
            onClick={() => handleQuickAction('show_products')}
          >
            üåπ –ë—É–∫–µ—Ç—ã
          </Button>
          <Button 
            variant="ghost" 
            size="sm"
            type="button"
            onClick={() => handleQuickAction('show_cart')}
          >
            üõí –ö–æ—Ä–∑–∏–Ω–∞ ({getItemCount()})
          </Button>
          {getItemCount() > 0 && (
            <Button 
              variant="ghost" 
              size="sm"
              type="button"
              onClick={() => handleQuickAction('checkout')}
            >
              üìù –ó–∞–∫–∞–∑
            </Button>
          )}
        </div>
      </form>
    </Card>
  )
}